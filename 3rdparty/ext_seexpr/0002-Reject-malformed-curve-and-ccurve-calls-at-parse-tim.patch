From e94e90bb1cbf063ecba8294fc8f5837e8eccae74 Mon Sep 17 00:00:00 2001
From: "L. E. Segovia" <amy@amyspark.me>
Date: Thu, 30 Sep 2021 16:03:30 +0000
Subject: [PATCH 2/4] Reject malformed curve and ccurve calls at parse time

---
 generated/KSeExpr/ExprParser.cpp          | 434 +++++++++++-----------
 generated/KSeExpr/ExprParser.tab.h        |   6 +-
 generated/KSeExpr/ExprParserLex.cpp       |   2 +-
 generated/KSeExpr/ExprParserLexIn.cpp     | 135 ++++---
 generated/KSeExprUI/ExprSpecParser.cpp    | 282 +++++++-------
 generated/KSeExprUI/ExprSpecParser.tab.h  |   2 +-
 generated/KSeExprUI/ExprSpecParserLex.cpp |   2 +-
 src/KSeExpr/ExprBuiltins.cpp              |  25 +-
 src/KSeExpr/ExprParserLex.l               |   2 +-
 src/KSeExprUI/ExprSpecParser.y            |  28 +-
 src/KSeExprUI/ExprSpecParserLex.l         |   2 +-
 11 files changed, 478 insertions(+), 442 deletions(-)

diff --git a/generated/KSeExpr/ExprParser.cpp b/generated/KSeExpr/ExprParser.cpp
index d14247e..cdded95 100644
--- a/generated/KSeExpr/ExprParser.cpp
+++ b/generated/KSeExpr/ExprParser.cpp
@@ -1,8 +1,8 @@
-/* A Bison parser, made by GNU Bison 3.6.4.  */
+/* A Bison parser, made by GNU Bison 3.7.6.  */
 
 /* Bison implementation for Yacc-like parsers in C
 
-   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
    Inc.
 
    This program is free software: you can redistribute it and/or modify
@@ -16,7 +16,7 @@
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -45,11 +45,11 @@
    define necessary library symbols; they are noted "INFRINGES ON
    USER NAME SPACE" below.  */
 
-/* Identify Bison output.  */
-#define SeExprYYBISON 1
+/* Identify Bison output, and Bison version.  */
+#define SeExprYYBISON 30706
 
-/* Bison version.  */
-#define SeExprYYBISON_VERSION "3.6.4"
+/* Bison version string.  */
+#define SeExprYYBISON_VERSION "3.7.6"
 
 /* Skeleton name.  */
 #define SeExprYYSKELETON_NAME "yacc.c"
@@ -378,6 +378,18 @@ typedef int_least16_t SeExprtype_int16;
 typedef short SeExprtype_int16;
 #endif
 
+/* Work around bug in HP-UX 11.23, which defines these macros
+   incorrectly for preprocessor constants.  This workaround can likely
+   be removed in 2023, as HPE has promised support for HP-UX 11.23
+   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
+   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
+#ifdef __hpux
+# undef UINT_LEAST8_MAX
+# undef UINT_LEAST16_MAX
+# define UINT_LEAST8_MAX 255
+# define UINT_LEAST16_MAX 65535
+#endif
+
 #if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
 typedef __UINT_LEAST8_TYPE__ SeExprtype_uint8;
 #elif (!defined __UINT_LEAST8_MAX__ && defined SeExprYY_STDINT_H \
@@ -475,9 +487,9 @@ typedef int SeExpr_state_fast_t;
 
 /* Suppress unused-variable warnings by "using" E.  */
 #if ! defined lint || defined __GNUC__
-# define SeExprYYUSE(E) ((void) (E))
+# define SeExprYY_USE(E) ((void) (E))
 #else
-# define SeExprYYUSE(E) /* empty */
+# define SeExprYY_USE(E) /* empty */
 #endif
 
 #if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
@@ -658,6 +670,7 @@ union SeExpralloc
 /* SeExprYYNSTATES -- Number of states.  */
 #define SeExprYYNSTATES  187
 
+/* SeExprYYMAXUTOK -- Last valid token kind.  */
 #define SeExprYYMAXUTOK   285
 
 
@@ -836,9 +849,9 @@ static const SeExprtype_int16 SeExprpgoto[] =
 };
 
   /* SeExprYYDEFGOTO[NTERM-NUM].  */
-static const SeExprtype_int16 SeExprdefgoto[] =
+static const SeExprtype_uint8 SeExprdefgoto[] =
 {
-      -1,    14,    15,    16,    80,   126,   153,   154,   127,   128,
+       0,    14,    15,    16,    80,   126,   153,   154,   127,   128,
       17,   164,    18,    19,    20,   179,    21,    51,    92,    93,
       94
 };
@@ -1188,8 +1201,8 @@ SeExpr_symbol_value_print (FILE *SeExpro,
                        SeExprsymbol_kind_t SeExprkind, SeExprYYSTYPE const * const SeExprvaluep, SeExprYYLTYPE const * const SeExprlocationp)
 {
   FILE *SeExproutput = SeExpro;
-  SeExprYYUSE (SeExproutput);
-  SeExprYYUSE (SeExprlocationp);
+  SeExprYY_USE (SeExproutput);
+  SeExprYY_USE (SeExprlocationp);
   if (!SeExprvaluep)
     return;
 # ifdef SeExprYYPRINT
@@ -1197,7 +1210,7 @@ SeExpr_symbol_value_print (FILE *SeExpro,
     SeExprYYPRINT (SeExpro, SeExprtoknum[SeExprkind], *SeExprvaluep);
 # endif
   SeExprYY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-  SeExprYYUSE (SeExprkind);
+  SeExprYY_USE (SeExprkind);
   SeExprYY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
@@ -1314,19 +1327,19 @@ static void
 SeExprdestruct (const char *SeExprmsg,
             SeExprsymbol_kind_t SeExprkind, SeExprYYSTYPE *SeExprvaluep, SeExprYYLTYPE *SeExprlocationp)
 {
-  SeExprYYUSE (SeExprvaluep);
-  SeExprYYUSE (SeExprlocationp);
+  SeExprYY_USE (SeExprvaluep);
+  SeExprYY_USE (SeExprlocationp);
   if (!SeExprmsg)
     SeExprmsg = "Deleting";
   SeExprYY_SYMBOL_PRINT (SeExprmsg, SeExprkind, SeExprvaluep, SeExprlocationp);
 
   SeExprYY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-  SeExprYYUSE (SeExprkind);
+  SeExprYY_USE (SeExprkind);
   SeExprYY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
-/* The lookahead symbol.  */
+/* Lookahead token kind.  */
 int SeExprchar;
 
 /* The semantic value of the lookahead symbol.  */
@@ -1350,40 +1363,35 @@ int SeExprnerrs;
 int
 SeExprparse (void)
 {
-    SeExpr_state_fast_t SeExprstate;
+    SeExpr_state_fast_t SeExprstate = 0;
     /* Number of tokens to shift before error messages enabled.  */
-    int SeExprerrstatus;
+    int SeExprerrstatus = 0;
 
-    /* The stacks and their tools:
-       'SeExprss': related to states.
-       'SeExprvs': related to semantic values.
-       'SeExprls': related to locations.
-
-       Refer to the stacks through separate pointers, to allow SeExproverflow
+    /* Refer to the stacks through separate pointers, to allow SeExproverflow
        to reallocate them elsewhere.  */
 
     /* Their size.  */
-    SeExprYYPTRDIFF_T SeExprstacksize;
+    SeExprYYPTRDIFF_T SeExprstacksize = SeExprYYINITDEPTH;
 
-    /* The state stack.  */
+    /* The state stack: array, bottom, top.  */
     SeExpr_state_t SeExprssa[SeExprYYINITDEPTH];
-    SeExpr_state_t *SeExprss;
-    SeExpr_state_t *SeExprssp;
+    SeExpr_state_t *SeExprss = SeExprssa;
+    SeExpr_state_t *SeExprssp = SeExprss;
 
-    /* The semantic value stack.  */
+    /* The semantic value stack: array, bottom, top.  */
     SeExprYYSTYPE SeExprvsa[SeExprYYINITDEPTH];
-    SeExprYYSTYPE *SeExprvs;
-    SeExprYYSTYPE *SeExprvsp;
+    SeExprYYSTYPE *SeExprvs = SeExprvsa;
+    SeExprYYSTYPE *SeExprvsp = SeExprvs;
 
-    /* The location stack.  */
+    /* The location stack: array, bottom, top.  */
     SeExprYYLTYPE SeExprlsa[SeExprYYINITDEPTH];
-    SeExprYYLTYPE *SeExprls;
-    SeExprYYLTYPE *SeExprlsp;
+    SeExprYYLTYPE *SeExprls = SeExprlsa;
+    SeExprYYLTYPE *SeExprlsp = SeExprls;
 
   int SeExprn;
   /* The return value of SeExprparse.  */
   int SeExprresult;
-  /* Lookahead token as an internal (translated) token number.  */
+  /* Lookahead symbol kind.  */
   SeExprsymbol_kind_t SeExprtoken = SeExprYYSYMBOL_SeExprYYEMPTY;
   /* The variables used to return semantic value and location from the
      action routines.  */
@@ -1401,16 +1409,6 @@ SeExprparse (void)
      Keep to zero when no symbol should be popped.  */
   int SeExprlen = 0;
 
-  SeExprnerrs = 0;
-  SeExprstate = 0;
-  SeExprerrstatus = 0;
-
-  SeExprstacksize = SeExprYYINITDEPTH;
-  SeExprssp = SeExprss = SeExprssa;
-  SeExprvsp = SeExprvs = SeExprvsa;
-  SeExprlsp = SeExprls = SeExprlsa;
-
-
   SeExprYYDPRINTF ((stderr, "Starting parse\n"));
 
   SeExprchar = SeExprYYEMPTY; /* Cause a token to be read.  */
@@ -1621,34 +1619,34 @@ SeExprreduce:
   SeExprYY_REDUCE_PRINT (SeExprn);
   switch (SeExprn)
     {
-  case 2:
+  case 2: /* module: declarationList block  */
 #line 121 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { ParseResult = (SeExprvsp[-1].n); ParseResult->setPosition((SeExprloc).first_column, (SeExprloc).last_column);
                                   ParseResult->addChild((SeExprvsp[0].n)); }
-#line 1629 "y.tab.c"
+#line 1627 "y.tab.c"
     break;
 
-  case 3:
+  case 3: /* module: block  */
 #line 123 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { ParseResult = NODE((SeExprloc).first_column, (SeExprloc).last_column, ModuleNode);
                                   ParseResult->addChild((SeExprvsp[0].n)); }
-#line 1636 "y.tab.c"
+#line 1634 "y.tab.c"
     break;
 
-  case 4:
+  case 4: /* declarationList: declaration  */
 #line 128 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column, (SeExprloc).last_column, ModuleNode); (SeExprval.n)->addChild((SeExprvsp[0].n)); }
-#line 1642 "y.tab.c"
+#line 1640 "y.tab.c"
     break;
 
-  case 5:
+  case 5: /* declarationList: declarationList declaration  */
 #line 130 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-1].n); (SeExprval.n)->setPosition((SeExprloc).first_column, (SeExprloc).last_column);
                                   (SeExprval.n)->addChild((SeExprvsp[0].n)); }
-#line 1649 "y.tab.c"
+#line 1647 "y.tab.c"
     break;
 
-  case 6:
+  case 6: /* declaration: EXTERN typeDeclare NAME '(' typeListOptional ')'  */
 #line 136 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[-4].t).type, (SeExprvsp[-4].t).dim, (SeExprvsp[-4].t).lifetime);
                                     KSeExpr::ExprPrototypeNode * prototype =
@@ -1657,10 +1655,10 @@ SeExprreduce:
                                   Forget((SeExprvsp[-1].n));
                                   (SeExprval.n) = prototype;
                                   free((SeExprvsp[-3].s)); }
-#line 1661 "y.tab.c"
+#line 1659 "y.tab.c"
     break;
 
-  case 7:
+  case 7: /* declaration: DEF typeDeclare NAME '(' formalTypeListOptional ')' '{' block '}'  */
 #line 144 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[-7].t).type, (SeExprvsp[-7].t).dim, (SeExprvsp[-7].t).lifetime);
                                   KSeExpr::ExprPrototypeNode * prototype =
@@ -1669,10 +1667,10 @@ SeExprreduce:
                                   Forget((SeExprvsp[-4].n));
                                   (SeExprval.n) = NODE2((SeExprloc).first_column, (SeExprloc).last_column, LocalFunctionNode, prototype, (SeExprvsp[-1].n));
                                   free((SeExprvsp[-6].s)); }
-#line 1673 "y.tab.c"
+#line 1671 "y.tab.c"
     break;
 
-  case 8:
+  case 8: /* declaration: DEF NAME '(' formalTypeListOptional ')' '{' block '}'  */
 #line 152 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { KSeExpr::ExprPrototypeNode * prototype =
                                         (KSeExpr::ExprPrototypeNode*)NODE1((SeExprloc).first_column, (SeExprlsp[-3]).last_column, PrototypeNode, (SeExprvsp[-6].s));
@@ -1680,520 +1678,520 @@ SeExprreduce:
                                   Forget((SeExprvsp[-4].n));
                                   (SeExprval.n) = NODE2((SeExprloc).first_column, (SeExprloc).last_column, LocalFunctionNode, prototype, (SeExprvsp[-1].n));
                                   free((SeExprvsp[-6].s)); }
-#line 1684 "y.tab.c"
+#line 1682 "y.tab.c"
     break;
 
-  case 9:
+  case 9: /* lifetimeOptional: %empty  */
 #line 161 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.l) = KSeExpr::ExprType::ltVARYING; }
-#line 1690 "y.tab.c"
+#line 1688 "y.tab.c"
     break;
 
-  case 10:
+  case 10: /* lifetimeOptional: LIFETIME_CONSTANT  */
 #line 162 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.l) = KSeExpr::ExprType::ltCONSTANT; }
-#line 1696 "y.tab.c"
+#line 1694 "y.tab.c"
     break;
 
-  case 11:
+  case 11: /* lifetimeOptional: LIFETIME_UNIFORM  */
 #line 163 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.l) = KSeExpr::ExprType::ltUNIFORM; }
-#line 1702 "y.tab.c"
+#line 1700 "y.tab.c"
     break;
 
-  case 12:
+  case 12: /* lifetimeOptional: LIFETIME_VARYING  */
 #line 164 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.l) = KSeExpr::ExprType::ltVARYING; }
-#line 1708 "y.tab.c"
+#line 1706 "y.tab.c"
     break;
 
-  case 13:
+  case 13: /* lifetimeOptional: LIFETIME_ERROR  */
 #line 165 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.l) = KSeExpr::ExprType::ltERROR; }
-#line 1714 "y.tab.c"
+#line 1712 "y.tab.c"
     break;
 
-  case 14:
+  case 14: /* typeDeclare: FLOATPOINT lifetimeOptional  */
 #line 169 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                  {(SeExprval.t).type     = KSeExpr::ExprType::tFP;
                                   (SeExprval.t).dim      = 1;
                                   (SeExprval.t).lifetime = (SeExprvsp[0].l); }
-#line 1722 "y.tab.c"
+#line 1720 "y.tab.c"
     break;
 
-  case 15:
+  case 15: /* typeDeclare: FLOATPOINT '[' NUMBER ']' lifetimeOptional  */
 #line 173 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.t).type = ((SeExprvsp[-2].d) > 0 ? KSeExpr::ExprType::tFP : KSeExpr::ExprType::tERROR);
                                   //TODO: This causes an error but does not report it to user. Change this.
                                   (SeExprval.t).dim  = ((SeExprvsp[-2].d) > 0 ? (SeExprvsp[-2].d) : 0);
                                   (SeExprval.t).lifetime = (SeExprvsp[0].l); }
-#line 1731 "y.tab.c"
+#line 1729 "y.tab.c"
     break;
 
-  case 16:
+  case 16: /* typeDeclare: STRING lifetimeOptional  */
 #line 177 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.t).type = KSeExpr::ExprType::tSTRING;
                                   (SeExprval.t).dim  = 1;
                                   (SeExprval.t).lifetime = (SeExprvsp[0].l); }
-#line 1739 "y.tab.c"
+#line 1737 "y.tab.c"
     break;
 
-  case 17:
+  case 17: /* typeListOptional: %empty  */
 #line 183 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column, (SeExprloc).last_column, Node); }
-#line 1745 "y.tab.c"
+#line 1743 "y.tab.c"
     break;
 
-  case 18:
+  case 18: /* typeListOptional: typeList  */
 #line 184 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1751 "y.tab.c"
+#line 1749 "y.tab.c"
     break;
 
-  case 19:
+  case 19: /* typeList: typeDeclare  */
 #line 188 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column, (SeExprloc).last_column, Node);
                                   KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[0].t).type, (SeExprvsp[0].t).dim, (SeExprvsp[0].t).lifetime);
                                   KSeExpr::ExprNode* varNode = NODE2((SeExprloc).first_column, (SeExprloc).last_column, VarNode, "", type);
                                   (SeExprval.n)->addChild(varNode); }
-#line 1760 "y.tab.c"
+#line 1758 "y.tab.c"
     break;
 
-  case 20:
+  case 20: /* typeList: typeList ',' typeDeclare  */
 #line 192 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-2].n);
                                   KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[0].t).type, (SeExprvsp[0].t).dim, (SeExprvsp[0].t).lifetime);
                                   KSeExpr::ExprNode* varNode = NODE2((SeExprlsp[0]).first_column, (SeExprlsp[0]).last_column, VarNode, "", type);
                                   (SeExprval.n)->addChild(varNode); }
-#line 1769 "y.tab.c"
+#line 1767 "y.tab.c"
     break;
 
-  case 21:
+  case 21: /* formalTypeListOptional: %empty  */
 #line 199 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column, (SeExprloc).last_column, Node); }
-#line 1775 "y.tab.c"
+#line 1773 "y.tab.c"
     break;
 
-  case 22:
+  case 22: /* formalTypeListOptional: formalTypeList  */
 #line 200 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1781 "y.tab.c"
+#line 1779 "y.tab.c"
     break;
 
-  case 23:
+  case 23: /* formalTypeList: typeDeclare NAME  */
 #line 204 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                  { (SeExprval.n) = NODE((SeExprloc).first_column, (SeExprloc).last_column, Node);
                                   KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[-1].t).type, (SeExprvsp[-1].t).dim, (SeExprvsp[-1].t).lifetime);
                                   KSeExpr::ExprNode* varNode = NODE2((SeExprloc).first_column, (SeExprloc).last_column, VarNode, (SeExprvsp[0].s), type);
                                   (SeExprval.n)->addChild(varNode);
                                   free((SeExprvsp[0].s)); }
-#line 1791 "y.tab.c"
+#line 1789 "y.tab.c"
     break;
 
-  case 24:
+  case 24: /* formalTypeList: formalTypeList ',' typeDeclare NAME  */
 #line 210 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-3].n);
                                   KSeExpr::ExprType type = KSeExpr::ExprType((SeExprvsp[-1].t).type, (SeExprvsp[-1].t).dim, (SeExprvsp[-1].t).lifetime);
                                   KSeExpr::ExprNode* varNode = NODE2((SeExprlsp[-1]).first_column, (SeExprlsp[0]).last_column, VarNode, (SeExprvsp[0].s), type);
                                   (SeExprval.n)->addChild(varNode);
                                   free((SeExprvsp[0].s)); }
-#line 1801 "y.tab.c"
+#line 1799 "y.tab.c"
     break;
 
-  case 25:
+  case 25: /* block: assigns e  */
 #line 218 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,BlockNode, (SeExprvsp[-1].n), (SeExprvsp[0].n)); }
-#line 1807 "y.tab.c"
+#line 1805 "y.tab.c"
     break;
 
-  case 26:
+  case 26: /* block: e  */
 #line 219 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1813 "y.tab.c"
+#line 1811 "y.tab.c"
     break;
 
-  case 27:
+  case 27: /* optassigns: %empty  */
 #line 224 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column,(SeExprloc).last_column,Node); /* create empty node */; }
-#line 1819 "y.tab.c"
+#line 1817 "y.tab.c"
     break;
 
-  case 28:
+  case 28: /* optassigns: assigns  */
 #line 225 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1825 "y.tab.c"
+#line 1823 "y.tab.c"
     break;
 
-  case 29:
+  case 29: /* assigns: assign  */
 #line 229 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,Node, (SeExprvsp[0].n)); /* create var list */}
-#line 1831 "y.tab.c"
+#line 1829 "y.tab.c"
     break;
 
-  case 30:
+  case 30: /* assigns: assigns assign  */
 #line 230 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-1].n); (SeExprvsp[-1].n)->addChild((SeExprvsp[0].n)); /* add to list */}
-#line 1837 "y.tab.c"
+#line 1835 "y.tab.c"
     break;
 
-  case 31:
+  case 31: /* assign: ifthenelse  */
 #line 234 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1843 "y.tab.c"
+#line 1841 "y.tab.c"
     break;
 
-  case 32:
+  case 32: /* assign: VAR '=' e ';'  */
 #line 235 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), (SeExprvsp[-1].n)); free((SeExprvsp[-3].s)); }
-#line 1849 "y.tab.c"
+#line 1847 "y.tab.c"
     break;
 
-  case 33:
+  case 33: /* assign: VAR AddEq e ';'  */
 #line 236 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                    {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'+');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1857 "y.tab.c"
+#line 1855 "y.tab.c"
     break;
 
-  case 34:
+  case 34: /* assign: VAR SubEq e ';'  */
 #line 239 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                    {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'-');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1865 "y.tab.c"
+#line 1863 "y.tab.c"
     break;
 
-  case 35:
+  case 35: /* assign: VAR MultEq e ';'  */
 #line 242 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'*');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1873 "y.tab.c"
+#line 1871 "y.tab.c"
     break;
 
-  case 36:
+  case 36: /* assign: VAR DivEq e ';'  */
 #line 245 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                    {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'/');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1881 "y.tab.c"
+#line 1879 "y.tab.c"
     break;
 
-  case 37:
+  case 37: /* assign: VAR ExpEq e ';'  */
 #line 248 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                    {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'^');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1889 "y.tab.c"
+#line 1887 "y.tab.c"
     break;
 
-  case 38:
+  case 38: /* assign: VAR ModEq e ';'  */
 #line 251 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                    {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'%');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1897 "y.tab.c"
+#line 1895 "y.tab.c"
     break;
 
-  case 39:
+  case 39: /* assign: NAME '=' e ';'  */
 #line 254 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), (SeExprvsp[-1].n)); free((SeExprvsp[-3].s)); }
-#line 1903 "y.tab.c"
+#line 1901 "y.tab.c"
     break;
 
-  case 40:
+  case 40: /* assign: NAME AddEq e ';'  */
 #line 255 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'+');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1911 "y.tab.c"
+#line 1909 "y.tab.c"
     break;
 
-  case 41:
+  case 41: /* assign: NAME SubEq e ';'  */
 #line 258 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'-');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1919 "y.tab.c"
+#line 1917 "y.tab.c"
     break;
 
-  case 42:
+  case 42: /* assign: NAME MultEq e ';'  */
 #line 261 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                      {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'*');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1927 "y.tab.c"
+#line 1925 "y.tab.c"
     break;
 
-  case 43:
+  case 43: /* assign: NAME DivEq e ';'  */
 #line 264 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'/');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1935 "y.tab.c"
+#line 1933 "y.tab.c"
     break;
 
-  case 44:
+  case 44: /* assign: NAME ExpEq e ';'  */
 #line 267 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'^');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1943 "y.tab.c"
+#line 1941 "y.tab.c"
     break;
 
-  case 45:
+  case 45: /* assign: NAME ModEq e ';'  */
 #line 270 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                     {KSeExpr::ExprNode* varNode=NODE1((SeExprlsp[-3]).first_column,(SeExprlsp[-3]).first_column,VarNode, (SeExprvsp[-3].s));
                                KSeExpr::ExprNode* opNode=NODE3((SeExprlsp[-1]).first_column,(SeExprlsp[-1]).first_column,BinaryOpNode,varNode,(SeExprvsp[-1].n),'%');
                                 (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,AssignNode, (SeExprvsp[-3].s), opNode);free((SeExprvsp[-3].s));}
-#line 1951 "y.tab.c"
+#line 1949 "y.tab.c"
     break;
 
-  case 46:
+  case 46: /* ifthenelse: IF '(' e ')' '{' optassigns '}' optelse  */
 #line 277 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,IfThenElseNode, (SeExprvsp[-5].n), (SeExprvsp[-2].n), (SeExprvsp[0].n)); }
-#line 1957 "y.tab.c"
+#line 1955 "y.tab.c"
     break;
 
-  case 47:
+  case 47: /* optelse: %empty  */
 #line 281 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column,(SeExprloc).last_column,Node); /* create empty node */ }
-#line 1963 "y.tab.c"
+#line 1961 "y.tab.c"
     break;
 
-  case 48:
+  case 48: /* optelse: ELSE '{' optassigns '}'  */
 #line 282 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-1].n); }
-#line 1969 "y.tab.c"
+#line 1967 "y.tab.c"
     break;
 
-  case 49:
+  case 49: /* optelse: ELSE ifthenelse  */
 #line 283 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 1975 "y.tab.c"
+#line 1973 "y.tab.c"
     break;
 
-  case 50:
+  case 50: /* e: '(' e ')'  */
 #line 288 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-1].n); }
-#line 1981 "y.tab.c"
+#line 1979 "y.tab.c"
     break;
 
-  case 51:
+  case 51: /* e: '[' exprlist ']'  */
 #line 289 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { KSeExpr::ExprNode* newNode = NODE((SeExprloc).first_column,(SeExprloc).last_column,VecNode); newNode->addChildren((SeExprvsp[-1].n)); Forget((SeExprvsp[-1].n)); (SeExprval.n)=newNode;}
-#line 1987 "y.tab.c"
+#line 1985 "y.tab.c"
     break;
 
-  case 52:
+  case 52: /* e: e '[' e ']'  */
 #line 290 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,SubscriptNode, (SeExprvsp[-3].n), (SeExprvsp[-1].n)); }
-#line 1993 "y.tab.c"
+#line 1991 "y.tab.c"
     break;
 
-  case 53:
+  case 53: /* e: e '?' e ':' e  */
 #line 291 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CondNode, (SeExprvsp[-4].n), (SeExprvsp[-2].n), (SeExprvsp[0].n)); }
-#line 1999 "y.tab.c"
+#line 1997 "y.tab.c"
     break;
 
-  case 54:
+  case 54: /* e: e OR e  */
 #line 292 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '|'); }
-#line 2005 "y.tab.c"
+#line 2003 "y.tab.c"
     break;
 
-  case 55:
+  case 55: /* e: e AND e  */
 #line 293 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '&'); }
-#line 2011 "y.tab.c"
+#line 2009 "y.tab.c"
     break;
 
-  case 56:
+  case 56: /* e: e EQ e  */
 #line 294 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareEqNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'='); }
-#line 2017 "y.tab.c"
+#line 2015 "y.tab.c"
     break;
 
-  case 57:
+  case 57: /* e: e NE e  */
 #line 295 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareEqNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'!'); }
-#line 2023 "y.tab.c"
+#line 2021 "y.tab.c"
     break;
 
-  case 58:
+  case 58: /* e: e '<' e  */
 #line 296 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'<'); }
-#line 2029 "y.tab.c"
+#line 2027 "y.tab.c"
     break;
 
-  case 59:
+  case 59: /* e: e '>' e  */
 #line 297 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'>'); }
-#line 2035 "y.tab.c"
+#line 2033 "y.tab.c"
     break;
 
-  case 60:
+  case 60: /* e: e SEEXPR_LE e  */
 #line 298 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                         { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'l'); }
-#line 2041 "y.tab.c"
+#line 2039 "y.tab.c"
     break;
 
-  case 61:
+  case 61: /* e: e SEEXPR_GE e  */
 #line 299 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                         { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,CompareNode, (SeExprvsp[-2].n), (SeExprvsp[0].n),'g'); }
-#line 2047 "y.tab.c"
+#line 2045 "y.tab.c"
     break;
 
-  case 62:
+  case 62: /* e: '+' e  */
 #line 300 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 2053 "y.tab.c"
+#line 2051 "y.tab.c"
     break;
 
-  case 63:
+  case 63: /* e: '-' e  */
 #line 301 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,UnaryOpNode, (SeExprvsp[0].n), '-'); }
-#line 2059 "y.tab.c"
+#line 2057 "y.tab.c"
     break;
 
-  case 64:
+  case 64: /* e: '!' e  */
 #line 302 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,UnaryOpNode, (SeExprvsp[0].n), '!'); }
-#line 2065 "y.tab.c"
+#line 2063 "y.tab.c"
     break;
 
-  case 65:
+  case 65: /* e: '~' e  */
 #line 303 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE2((SeExprloc).first_column,(SeExprloc).last_column,UnaryOpNode, (SeExprvsp[0].n), '~'); }
-#line 2071 "y.tab.c"
+#line 2069 "y.tab.c"
     break;
 
-  case 66:
+  case 66: /* e: e '+' e  */
 #line 304 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '+'); }
-#line 2077 "y.tab.c"
+#line 2075 "y.tab.c"
     break;
 
-  case 67:
+  case 67: /* e: e '-' e  */
 #line 305 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '-'); }
-#line 2083 "y.tab.c"
+#line 2081 "y.tab.c"
     break;
 
-  case 68:
+  case 68: /* e: e '*' e  */
 #line 306 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '*'); }
-#line 2089 "y.tab.c"
+#line 2087 "y.tab.c"
     break;
 
-  case 69:
+  case 69: /* e: e '/' e  */
 #line 307 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '/'); }
-#line 2095 "y.tab.c"
+#line 2093 "y.tab.c"
     break;
 
-  case 70:
+  case 70: /* e: e '%' e  */
 #line 308 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '%'); }
-#line 2101 "y.tab.c"
+#line 2099 "y.tab.c"
     break;
 
-  case 71:
+  case 71: /* e: e '^' e  */
 #line 309 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE3((SeExprloc).first_column,(SeExprloc).last_column,BinaryOpNode, (SeExprvsp[-2].n), (SeExprvsp[0].n), '^'); }
-#line 2107 "y.tab.c"
+#line 2105 "y.tab.c"
     break;
 
-  case 72:
+  case 72: /* e: NAME '(' optargs ')'  */
 #line 310 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,FuncNode, (SeExprvsp[-3].s));
 				  free((SeExprvsp[-3].s)); // free name string
 				  // add args directly and discard arg list node
 				  (SeExprval.n)->addChildren((SeExprvsp[-1].n)); Forget((SeExprvsp[-1].n)); }
-#line 2116 "y.tab.c"
+#line 2114 "y.tab.c"
     break;
 
-  case 73:
+  case 73: /* e: e ARROW NAME '(' optargs ')'  */
 #line 315 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,FuncNode, (SeExprvsp[-3].s));
 				  free((SeExprvsp[-3].s)); // free name string
 				  (SeExprval.n)->addChild((SeExprvsp[-5].n));
 				  // add args directly and discard arg list node
 				  (SeExprval.n)->addChildren((SeExprvsp[-1].n)); Forget((SeExprvsp[-1].n)); }
-#line 2126 "y.tab.c"
+#line 2124 "y.tab.c"
     break;
 
-  case 74:
+  case 74: /* e: VAR  */
 #line 320 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,VarNode, (SeExprvsp[0].s)); free((SeExprvsp[0].s)); /* free name string */ }
-#line 2132 "y.tab.c"
+#line 2130 "y.tab.c"
     break;
 
-  case 75:
+  case 75: /* e: NAME  */
 #line 321 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,VarNode, (SeExprvsp[0].s)); free((SeExprvsp[0].s)); /* free name string */ }
-#line 2138 "y.tab.c"
+#line 2136 "y.tab.c"
     break;
 
-  case 76:
+  case 76: /* e: NUMBER  */
 #line 322 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,NumNode, (SeExprvsp[0].d)); /*printf("line %d",@$.last_column);*/}
-#line 2144 "y.tab.c"
+#line 2142 "y.tab.c"
     break;
 
-  case 77:
+  case 77: /* e: STR  */
 #line 323 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,StrNode, (SeExprvsp[0].s)); free((SeExprvsp[0].s)); /* free string */}
-#line 2150 "y.tab.c"
+#line 2148 "y.tab.c"
     break;
 
-  case 78:
+  case 78: /* exprlist: e  */
 #line 327 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,Node,(SeExprvsp[0].n)); }
-#line 2156 "y.tab.c"
+#line 2154 "y.tab.c"
     break;
 
-  case 79:
+  case 79: /* exprlist: exprlist ',' e  */
 #line 328 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-2].n);
                                   (SeExprvsp[-2].n)->addChild((SeExprvsp[0].n)); }
-#line 2163 "y.tab.c"
+#line 2161 "y.tab.c"
     break;
 
-  case 80:
+  case 80: /* optargs: %empty  */
 #line 334 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE((SeExprloc).first_column,(SeExprloc).last_column,Node); /* create empty node */}
-#line 2169 "y.tab.c"
+#line 2167 "y.tab.c"
     break;
 
-  case 81:
+  case 81: /* optargs: args  */
 #line 335 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 2175 "y.tab.c"
+#line 2173 "y.tab.c"
     break;
 
-  case 82:
+  case 82: /* args: arg  */
 #line 340 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = NODE1((SeExprloc).first_column,(SeExprloc).last_column,Node, (SeExprvsp[0].n)); /* create arg list */}
-#line 2181 "y.tab.c"
+#line 2179 "y.tab.c"
     break;
 
-  case 83:
+  case 83: /* args: args ',' arg  */
 #line 341 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[-2].n); (SeExprvsp[-2].n)->addChild((SeExprvsp[0].n)); /* add to list */}
-#line 2187 "y.tab.c"
+#line 2185 "y.tab.c"
     break;
 
-  case 84:
+  case 84: /* arg: e  */
 #line 345 "@@PATH@@/src/KSeExpr/ExprParser.y"
                                 { (SeExprval.n) = (SeExprvsp[0].n); }
-#line 2193 "y.tab.c"
+#line 2191 "y.tab.c"
     break;
 
 
-#line 2197 "y.tab.c"
+#line 2195 "y.tab.c"
 
       default: break;
     }
@@ -2358,13 +2356,13 @@ SeExprabortlab:
 SeExprexhaustedlab:
   SeExprerror (SeExprYY_("memory exhausted"));
   SeExprresult = 2;
-  /* Fall through.  */
+  goto SeExprreturn;
 #endif
 
 
-/*-----------------------------------------------------.
-| SeExprreturn -- parsing is finished, return the result.  |
-`-----------------------------------------------------*/
+/*-------------------------------------------------------.
+| SeExprreturn -- parsing is finished, clean up and return.  |
+`-------------------------------------------------------*/
 SeExprreturn:
   if (SeExprchar != SeExprYYEMPTY)
     {
diff --git a/generated/KSeExpr/ExprParser.tab.h b/generated/KSeExpr/ExprParser.tab.h
index e6a8a4f..4d98f04 100644
--- a/generated/KSeExpr/ExprParser.tab.h
+++ b/generated/KSeExpr/ExprParser.tab.h
@@ -1,8 +1,8 @@
-/* A Bison parser, made by GNU Bison 3.6.4.  */
+/* A Bison parser, made by GNU Bison 3.7.6.  */
 
 /* Bison interface for Yacc-like parsers in C
 
-   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
    Inc.
 
    This program is free software: you can redistribute it and/or modify
@@ -16,7 +16,7 @@
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
diff --git a/generated/KSeExpr/ExprParserLex.cpp b/generated/KSeExpr/ExprParserLex.cpp
index 5e91ac4..daf1aa9 100644
--- a/generated/KSeExpr/ExprParserLex.cpp
+++ b/generated/KSeExpr/ExprParserLex.cpp
@@ -566,7 +566,7 @@ char *SeExprtext;
 /**
  * SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
  * SPDX-License-Identifier: LicenseRef-Apache-2.0
- * SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
+ * SPDX-FileCopyrightText: 2020-2021 L. E. Segovia <amy@amyspark.me>
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
 /* Don't generate SeExprwrap since everything is in one string */
diff --git a/generated/KSeExpr/ExprParserLexIn.cpp b/generated/KSeExpr/ExprParserLexIn.cpp
index 612bf3a..fdbd6ec 100644
--- a/generated/KSeExpr/ExprParserLexIn.cpp
+++ b/generated/KSeExpr/ExprParserLexIn.cpp
@@ -563,22 +563,22 @@ int yy_flex_debug = 0;
 #define YY_RESTORE_YY_MORE_OFFSET
 char *yytext;
 #line 1 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
-// SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
-// SPDX-License-Identifier: LicenseRef-Apache-2.0
-// SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
-// SPDX-License-Identifier: GPL-3.0-or-later
+/**
+ * SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
+ * SPDX-License-Identifier: LicenseRef-Apache-2.0
+ * SPDX-FileCopyrightText: 2020-2021 L. E. Segovia <amy@amyspark.me>
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
 /* Don't generate yywrap since everything is in one string */
 /* Don't generate unput since it's unused and gcc complains... */
 /* Don't generate input since it's unused too -- amyspark */
 #define YY_NO_INPUT 1
-#line 26 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
-#ifndef MAKEDEPEND
-#    include <ctype.h>
-#    include <string.h>
-#    include <string>
-#    include <math.h>
-#    include <vector>
-#endif
+/* Don't worry about interactive and using isatty(). Fixes Windows compile. */
+#line 18 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#include <cctype>
+#include <cstring>
+#include <cmath>
+#include <vector>
 
 // If c++11 don't use register designator, lex and yacc need to go...
 #if __cplusplus > 199711L
@@ -616,8 +616,8 @@ int yypos();
     columnNumber+=yyleng;\
     yylloc.last_column=columnNumber;yylloc.last_line=lineNumber;}
 
-#line 633 "ExprParserLexIn.cpp"
-#line 634 "ExprParserLexIn.cpp"
+#line 619 "ExprParserLexIn.cpp"
+#line 620 "ExprParserLexIn.cpp"
 
 #define INITIAL 0
 
@@ -832,9 +832,9 @@ YY_DECL
 		}
 
 	{
-#line 78 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 66 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 
-#line 851 "ExprParserLexIn.cpp"
+#line 837 "ExprParserLexIn.cpp"
 
 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
 		{
@@ -867,16 +867,12 @@ yy_match:
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 246 );
+		while ( yy_current_state != 159 );
+		yy_cp = (yy_last_accepting_cpos);
+		yy_current_state = (yy_last_accepting_state);
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
-		if ( yy_act == 0 )
-			{ /* have to back up */
-			yy_cp = (yy_last_accepting_cpos);
-			yy_current_state = (yy_last_accepting_state);
-			yy_act = yy_accept[yy_current_state];
-			}
 
 		YY_DO_BEFORE_ACTION;
 
@@ -893,162 +889,162 @@ do_action:	/* This label is used only to access EOF actions. */
 
 case 1:
 YY_RULE_SETUP
-#line 79 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 67 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 
 	YY_BREAK
 case 2:
 YY_RULE_SETUP
-#line 81 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 69 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return EXTERN; }
 	YY_BREAK
 case 3:
 YY_RULE_SETUP
-#line 82 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 70 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return DEF; }
 	YY_BREAK
 case 4:
 YY_RULE_SETUP
-#line 83 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 71 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return FLOATPOINT; }
 	YY_BREAK
 case 5:
 YY_RULE_SETUP
-#line 84 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 72 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return STRING; }
 	YY_BREAK
 case 6:
 YY_RULE_SETUP
-#line 85 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 73 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return LIFETIME_CONSTANT; }
 	YY_BREAK
 case 7:
 YY_RULE_SETUP
-#line 86 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 74 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return LIFETIME_UNIFORM; }
 	YY_BREAK
 case 8:
 YY_RULE_SETUP
-#line 87 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 75 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return LIFETIME_VARYING; }
 	YY_BREAK
 case 9:
 YY_RULE_SETUP
-#line 88 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 76 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return LIFETIME_ERROR; }
 	YY_BREAK
 case 10:
 YY_RULE_SETUP
-#line 90 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 78 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return IF; }
 	YY_BREAK
 case 11:
 YY_RULE_SETUP
-#line 91 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 79 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return ELSE; }
 	YY_BREAK
 case 12:
 YY_RULE_SETUP
-#line 93 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 81 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return OR; }
 	YY_BREAK
 case 13:
 YY_RULE_SETUP
-#line 94 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 82 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return AND; }
 	YY_BREAK
 case 14:
 YY_RULE_SETUP
-#line 95 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 83 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return EQ; }
 	YY_BREAK
 case 15:
 YY_RULE_SETUP
-#line 96 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 84 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return NE; }
 	YY_BREAK
 case 16:
 YY_RULE_SETUP
-#line 97 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 85 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return SEEXPR_LE; }
 	YY_BREAK
 case 17:
 YY_RULE_SETUP
-#line 98 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 86 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return SEEXPR_GE; }
 	YY_BREAK
 case 18:
 YY_RULE_SETUP
-#line 99 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 87 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return ARROW; }
 	YY_BREAK
 case 19:
 YY_RULE_SETUP
-#line 100 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 88 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return AddEq; }
 	YY_BREAK
 case 20:
 YY_RULE_SETUP
-#line 101 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 89 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return SubEq; }
 	YY_BREAK
 case 21:
 YY_RULE_SETUP
-#line 102 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 90 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return MultEq; }
 	YY_BREAK
 case 22:
 YY_RULE_SETUP
-#line 103 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 91 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return DivEq; }
 	YY_BREAK
 case 23:
 YY_RULE_SETUP
-#line 104 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 92 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return ModEq; }
 	YY_BREAK
 case 24:
 YY_RULE_SETUP
-#line 105 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 93 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return ExpEq; }
 	YY_BREAK
 case 25:
 YY_RULE_SETUP
-#line 107 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 95 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = M_PI; return NUMBER; }
 	YY_BREAK
 case 26:
 YY_RULE_SETUP
-#line 108 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 96 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = M_E; return NUMBER; }
 	YY_BREAK
 case 27:
 YY_RULE_SETUP
-#line 109 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 97 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = 0; return NUMBER; }
 	YY_BREAK
 case 28:
 YY_RULE_SETUP
-#line 110 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 98 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = 1; return NUMBER; }
 	YY_BREAK
 case 29:
 YY_RULE_SETUP
-#line 111 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 99 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = 2; return NUMBER; }
 	YY_BREAK
 case 30:
 YY_RULE_SETUP
-#line 112 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 100 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = 3; return NUMBER; }
 	YY_BREAK
 case 31:
 YY_RULE_SETUP
-#line 114 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 102 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.d = KSeExpr::Utils::atof(yytext); return NUMBER; }
 	YY_BREAK
 case 32:
 YY_RULE_SETUP
-#line 115 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 103 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { /* match quoted string, allow embedded quote, \" */
 			  yylval.s = strdup(&yytext[1]);
 			  yylval.s[strlen(yylval.s)-1] = '\0';
@@ -1056,7 +1052,7 @@ YY_RULE_SETUP
 	YY_BREAK
 case 33:
 YY_RULE_SETUP
-#line 119 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 107 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { /* match quoted string, allow embedded quote, \' */
 			  yylval.s = strdup(&yytext[1]);
 			  yylval.s[strlen(yylval.s)-1] = '\0';
@@ -1064,53 +1060,53 @@ YY_RULE_SETUP
 	YY_BREAK
 case 34:
 YY_RULE_SETUP
-#line 123 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 111 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.s = strdup(&yytext[1]); return VAR; }
 	YY_BREAK
 case 35:
 YY_RULE_SETUP
-#line 124 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 112 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.s = strdup(&yytext[1]); return VAR; }
 	YY_BREAK
 case 36:
 YY_RULE_SETUP
-#line 125 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 113 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { yylval.s = strdup(yytext); return NAME; }
 	YY_BREAK
 case 37:
 YY_RULE_SETUP
-#line 127 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 115 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 /* ignore quoted newline */;
 	YY_BREAK
 case 38:
 YY_RULE_SETUP
-#line 128 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 116 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 /* ignore quoted tab */;
 	YY_BREAK
 case 39:
 /* rule 39 can match eol */
 YY_RULE_SETUP
-#line 129 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 117 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 /* ignore whitespace */;
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
-#line 130 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 118 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { /* match comment */
                          int startPos=yypos(),endPos=yypos()+strlen(&yytext[1])+1;
 			  comments->push_back(std::pair<int,int>(startPos,endPos));}
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
-#line 134 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 122 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 { return yytext[0]; }
 	YY_BREAK
 case 42:
 YY_RULE_SETUP
-#line 136 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 124 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 ECHO;
 	YY_BREAK
-#line 1127 "ExprParserLexIn.cpp"
+#line 1109 "ExprParserLexIn.cpp"
 case YY_STATE_EOF(INITIAL):
 	yyterminate();
 
@@ -1177,7 +1173,8 @@ case YY_STATE_EOF(INITIAL):
 
 			else
 				{
-				yy_cp = (yy_c_buf_p);
+				yy_cp = (yy_last_accepting_cpos);
+				yy_current_state = (yy_last_accepting_state);
 				goto yy_find_action;
 				}
 			}
@@ -1655,7 +1652,7 @@ static void yy_load_buffer_state  (void)
         b->yy_bs_column = 0;
     }
 
-        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+        b->yy_is_interactive = 0;
     
 	errno = oerrno;
 }
@@ -2078,7 +2075,7 @@ void yyfree (void * ptr )
 
 #define YYTABLES_NAME "yytables"
 
-#line 136 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
+#line 124 "@@PATH@@/src/KSeExpr/ExprParserLex.l"
 
 
 /* Gets index of current token (corresponding to yytext).
diff --git a/generated/KSeExprUI/ExprSpecParser.cpp b/generated/KSeExprUI/ExprSpecParser.cpp
index c810bbb..ace5e1f 100644
--- a/generated/KSeExprUI/ExprSpecParser.cpp
+++ b/generated/KSeExprUI/ExprSpecParser.cpp
@@ -174,10 +174,15 @@ static void specRegisterEditable(const char* var,ExprSpecNode* node)
                     ExprSpecScalarNode* xnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i]);
                     ExprSpecVectorNode* ynode=dynamic_cast<ExprSpecVectorNode*>(args->nodes[i+1]);
                     ExprSpecScalarNode* interpnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+2]);
-                    if(xnode && ynode && interpnode){
-                        ccurve->add(xnode->v,ynode->v,interpnode->v);
-                    }else{
-                        valid=false;
+                    if (xnode && ynode && interpnode) {
+                        if (interpnode->v >= 0 && interpnode->v <= 4) {
+                            ccurve->add(xnode->v, ynode->v, interpnode->v);
+                        } else {
+                            // invalid interpolant type -- Amyspark
+                            valid = false;
+                        }
+                    } else {
+                        valid = false;
                     }
                 }
                 if(valid) editables->push_back(ccurve);
@@ -194,11 +199,16 @@ static void specRegisterEditable(const char* var,ExprSpecNode* node)
                 for(size_t i=0;i<args->nodes.size();i+=3){
                     ExprSpecScalarNode* xnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i]);
                     ExprSpecScalarNode* ynode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+1]);
-                    ExprSpecScalarNode* interpnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+2]);
-                    if(xnode && ynode && interpnode){
-                        ccurve->add(xnode->v,ynode->v,interpnode->v);
-                    }else{
-                        valid=false;
+                    ExprSpecScalarNode *interpnode = dynamic_cast<ExprSpecScalarNode *>(args->nodes[i + 2]);
+                    if (xnode && ynode && interpnode) {
+                        if (interpnode->v >= 0 && interpnode->v <= 4) {
+                            ccurve->add(xnode->v, ynode->v, interpnode->v);
+                        } else {
+                            // invalid interpolant type -- Amyspark
+                            valid = false;
+                        }
+                    } else {
+                        valid = false;
                     }
                 }
                 if(valid) editables->push_back(ccurve);
@@ -238,7 +248,7 @@ static void specRegisterEditable(const char* var,ExprSpecNode* node)
 static void ExprSpecerror(const char* msg);
 
 
-#line 242 "y.tab.c"
+#line 252 "y.tab.c"
 
 # ifndef ExprSpecYY_CAST
 #  ifdef __cplusplus
@@ -310,13 +320,13 @@ extern int ExprSpecdebug;
 #if ! defined ExprSpecYYSTYPE && ! defined ExprSpecYYSTYPE_IS_DECLARED
 union ExprSpecYYSTYPE
 {
-#line 171 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 181 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
 
     ExprSpecNode* n;
     double d;      // return value for number tokens
     char* s;       /* return value for name tokens.  Note: UNLIKE the regular parser, this is not strdup()'dthe string */
 
-#line 320 "y.tab.c"
+#line 330 "y.tab.c"
 
 };
 typedef union ExprSpecYYSTYPE ExprSpecYYSTYPE;
@@ -787,12 +797,12 @@ static const ExprSpectype_int8 ExprSpectranslate[] =
   /* ExprSpecYYRLINE[ExprSpecYYN] -- Source line where rule number ExprSpecYYN was defined.  */
 static const ExprSpectype_int16 ExprSpecrline[] =
 {
-       0,   213,   213,   214,   219,   220,   224,   225,   230,   231,
-     235,   236,   237,   238,   239,   240,   241,   245,   246,   247,
-     248,   249,   250,   254,   259,   260,   261,   266,   267,   272,
-     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
-     283,   292,   293,   294,   295,   296,   297,   298,   299,   300,
-     321,   322,   323,   324,   325,   330,   331,   336,   345,   357
+       0,   223,   223,   224,   229,   230,   234,   235,   240,   241,
+     245,   246,   247,   248,   249,   250,   251,   255,   256,   257,
+     258,   259,   260,   264,   269,   270,   271,   276,   277,   282,
+     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
+     293,   302,   303,   304,   305,   306,   307,   308,   309,   310,
+     331,   332,   333,   334,   335,   340,   341,   346,   355,   367
 };
 #endif
 
@@ -1653,245 +1663,245 @@ ExprSpecreduce:
   switch (ExprSpecn)
     {
   case 2: /* expr: assigns e  */
-#line 213 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 223 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { ParseResult = 0; }
-#line 1659 "y.tab.c"
+#line 1669 "y.tab.c"
     break;
 
   case 3: /* expr: e  */
-#line 214 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 224 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { ParseResult = 0; }
-#line 1665 "y.tab.c"
+#line 1675 "y.tab.c"
     break;
 
   case 4: /* optassigns: %empty  */
-#line 219 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 229 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1671 "y.tab.c"
+#line 1681 "y.tab.c"
     break;
 
   case 5: /* optassigns: assigns  */
-#line 220 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 230 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1677 "y.tab.c"
+#line 1687 "y.tab.c"
     break;
 
   case 6: /* assigns: assign  */
-#line 224 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 234 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1683 "y.tab.c"
+#line 1693 "y.tab.c"
     break;
 
   case 7: /* assigns: assigns assign  */
-#line 225 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 235 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1689 "y.tab.c"
+#line 1699 "y.tab.c"
     break;
 
   case 8: /* assign: ifthenelse  */
-#line 230 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 240 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1695 "y.tab.c"
+#line 1705 "y.tab.c"
     break;
 
   case 9: /* assign: VAR '=' e ';'  */
-#line 231 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 241 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {
         specRegisterVariable((ExprSpecvsp[-3].s));
         specRegisterEditable((ExprSpecvsp[-3].s),(ExprSpecvsp[-1].n));
       }
-#line 1704 "y.tab.c"
+#line 1714 "y.tab.c"
     break;
 
   case 10: /* assign: VAR AddEq e ';'  */
-#line 235 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 245 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1710 "y.tab.c"
+#line 1720 "y.tab.c"
     break;
 
   case 11: /* assign: VAR SubEq e ';'  */
-#line 236 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 246 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1716 "y.tab.c"
+#line 1726 "y.tab.c"
     break;
 
   case 12: /* assign: VAR MultEq e ';'  */
-#line 237 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 247 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1722 "y.tab.c"
+#line 1732 "y.tab.c"
     break;
 
   case 13: /* assign: VAR DivEq e ';'  */
-#line 238 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 248 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1728 "y.tab.c"
+#line 1738 "y.tab.c"
     break;
 
   case 14: /* assign: VAR ExpEq e ';'  */
-#line 239 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 249 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1734 "y.tab.c"
+#line 1744 "y.tab.c"
     break;
 
   case 15: /* assign: VAR ModEq e ';'  */
-#line 240 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 250 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1740 "y.tab.c"
+#line 1750 "y.tab.c"
     break;
 
   case 16: /* assign: NAME '=' e ';'  */
-#line 241 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 251 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {
         specRegisterVariable((ExprSpecvsp[-3].s));
         specRegisterEditable((ExprSpecvsp[-3].s),(ExprSpecvsp[-1].n));
       }
-#line 1749 "y.tab.c"
+#line 1759 "y.tab.c"
     break;
 
   case 17: /* assign: NAME AddEq e ';'  */
-#line 245 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 255 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1755 "y.tab.c"
+#line 1765 "y.tab.c"
     break;
 
   case 18: /* assign: NAME SubEq e ';'  */
-#line 246 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 256 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1761 "y.tab.c"
+#line 1771 "y.tab.c"
     break;
 
   case 19: /* assign: NAME MultEq e ';'  */
-#line 247 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 257 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1767 "y.tab.c"
+#line 1777 "y.tab.c"
     break;
 
   case 20: /* assign: NAME DivEq e ';'  */
-#line 248 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 258 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1773 "y.tab.c"
+#line 1783 "y.tab.c"
     break;
 
   case 21: /* assign: NAME ExpEq e ';'  */
-#line 249 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 259 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1779 "y.tab.c"
+#line 1789 "y.tab.c"
     break;
 
   case 22: /* assign: NAME ModEq e ';'  */
-#line 250 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 260 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1785 "y.tab.c"
+#line 1795 "y.tab.c"
     break;
 
   case 23: /* ifthenelse: IF '(' e ')' '{' optassigns '}' optelse  */
-#line 255 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 265 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
     { (ExprSpecval.n) = 0; }
-#line 1791 "y.tab.c"
+#line 1801 "y.tab.c"
     break;
 
   case 24: /* optelse: %empty  */
-#line 259 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 269 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                         { (ExprSpecval.n) = 0; }
-#line 1797 "y.tab.c"
+#line 1807 "y.tab.c"
     break;
 
   case 25: /* optelse: ELSE '{' optassigns '}'  */
-#line 260 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 270 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                             { (ExprSpecval.n) = 0;}
-#line 1803 "y.tab.c"
+#line 1813 "y.tab.c"
     break;
 
   case 26: /* optelse: ELSE ifthenelse  */
-#line 261 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 271 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0;}
-#line 1809 "y.tab.c"
+#line 1819 "y.tab.c"
     break;
 
   case 27: /* e: '(' e ')'  */
-#line 266 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 276 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1815 "y.tab.c"
+#line 1825 "y.tab.c"
     break;
 
   case 28: /* e: '[' e ',' e ',' e ']'  */
-#line 267 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 277 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {
         if(SPEC_IS_NUMBER((ExprSpecvsp[-5].n)) && SPEC_IS_NUMBER((ExprSpecvsp[-3].n)) && SPEC_IS_NUMBER((ExprSpecvsp[-1].n))){
             (ExprSpecval.n)=remember(new ExprSpecVectorNode((ExprSpecloc).first_column,(ExprSpecloc).last_column,(ExprSpecvsp[-5].n),(ExprSpecvsp[-3].n),(ExprSpecvsp[-1].n)));
         }else (ExprSpecval.n)=0;
       }
-#line 1825 "y.tab.c"
+#line 1835 "y.tab.c"
     break;
 
   case 29: /* e: e '[' e ']'  */
-#line 272 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 282 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1831 "y.tab.c"
+#line 1841 "y.tab.c"
     break;
 
   case 30: /* e: e '?' e ':' e  */
-#line 273 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 283 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1837 "y.tab.c"
+#line 1847 "y.tab.c"
     break;
 
   case 31: /* e: e OR e  */
-#line 274 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 284 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1843 "y.tab.c"
+#line 1853 "y.tab.c"
     break;
 
   case 32: /* e: e AND e  */
-#line 275 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 285 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1849 "y.tab.c"
+#line 1859 "y.tab.c"
     break;
 
   case 33: /* e: e EQ e  */
-#line 276 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 286 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1855 "y.tab.c"
+#line 1865 "y.tab.c"
     break;
 
   case 34: /* e: e NE e  */
-#line 277 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 287 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1861 "y.tab.c"
+#line 1871 "y.tab.c"
     break;
 
   case 35: /* e: e '<' e  */
-#line 278 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 288 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1867 "y.tab.c"
+#line 1877 "y.tab.c"
     break;
 
   case 36: /* e: e '>' e  */
-#line 279 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 289 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1873 "y.tab.c"
+#line 1883 "y.tab.c"
     break;
 
   case 37: /* e: e LE e  */
-#line 280 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 290 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1879 "y.tab.c"
+#line 1889 "y.tab.c"
     break;
 
   case 38: /* e: e GE e  */
-#line 281 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 291 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1885 "y.tab.c"
+#line 1895 "y.tab.c"
     break;
 
   case 39: /* e: '+' e  */
-#line 282 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 292 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = (ExprSpecvsp[0].n); }
-#line 1891 "y.tab.c"
+#line 1901 "y.tab.c"
     break;
 
   case 40: /* e: '-' e  */
-#line 283 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 293 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {
         if(SPEC_IS_NUMBER((ExprSpecvsp[0].n))){
             ExprSpecScalarNode* node=(ExprSpecScalarNode*)(ExprSpecvsp[0].n);
@@ -1901,59 +1911,59 @@ ExprSpecreduce:
             (ExprSpecval.n)=(ExprSpecvsp[0].n);
         }else (ExprSpecval.n)=0;
       }
-#line 1905 "y.tab.c"
+#line 1915 "y.tab.c"
     break;
 
   case 41: /* e: '!' e  */
-#line 292 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 302 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1911 "y.tab.c"
+#line 1921 "y.tab.c"
     break;
 
   case 42: /* e: '~' e  */
-#line 293 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 303 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1917 "y.tab.c"
+#line 1927 "y.tab.c"
     break;
 
   case 43: /* e: e '+' e  */
-#line 294 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 304 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1923 "y.tab.c"
+#line 1933 "y.tab.c"
     break;
 
   case 44: /* e: e '-' e  */
-#line 295 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 305 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1929 "y.tab.c"
+#line 1939 "y.tab.c"
     break;
 
   case 45: /* e: e '*' e  */
-#line 296 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 306 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1935 "y.tab.c"
+#line 1945 "y.tab.c"
     break;
 
   case 46: /* e: e '/' e  */
-#line 297 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 307 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1941 "y.tab.c"
+#line 1951 "y.tab.c"
     break;
 
   case 47: /* e: e '%' e  */
-#line 298 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 308 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1947 "y.tab.c"
+#line 1957 "y.tab.c"
     break;
 
   case 48: /* e: e '^' e  */
-#line 299 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 309 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0; }
-#line 1953 "y.tab.c"
+#line 1963 "y.tab.c"
     break;
 
   case 49: /* e: NAME '(' optargs ')'  */
-#line 300 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 310 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {
         if((ExprSpecvsp[-1].n) && strcmp((ExprSpecvsp[-3].s),"curve")==0){
             (ExprSpecval.n)=remember(new ExprSpecCurveNode((ExprSpecvsp[-1].n)));
@@ -1975,53 +1985,53 @@ ExprSpecreduce:
             (ExprSpecval.n)=0;
         }else (ExprSpecval.n)=0;
       }
-#line 1979 "y.tab.c"
+#line 1989 "y.tab.c"
     break;
 
   case 50: /* e: e ARROW NAME '(' optargs ')'  */
-#line 321 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 331 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                   {(ExprSpecval.n) = 0; }
-#line 1985 "y.tab.c"
+#line 1995 "y.tab.c"
     break;
 
   case 51: /* e: VAR  */
-#line 322 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 332 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1991 "y.tab.c"
+#line 2001 "y.tab.c"
     break;
 
   case 52: /* e: NAME  */
-#line 323 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 333 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 {  (ExprSpecval.n) = 0; }
-#line 1997 "y.tab.c"
+#line 2007 "y.tab.c"
     break;
 
   case 53: /* e: NUMBER  */
-#line 324 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 334 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n)=remember(new ExprSpecScalarNode((ExprSpecloc).first_column,(ExprSpecloc).last_column,(ExprSpecvsp[0].d))); }
-#line 2003 "y.tab.c"
+#line 2013 "y.tab.c"
     break;
 
   case 54: /* e: STR  */
-#line 325 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 335 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                     { (ExprSpecval.n) = remember(new ExprSpecStringNode((ExprSpecloc).first_column,(ExprSpecloc).last_column,(ExprSpecvsp[0].s))); }
-#line 2009 "y.tab.c"
+#line 2019 "y.tab.c"
     break;
 
   case 55: /* optargs: %empty  */
-#line 330 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 340 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = 0;}
-#line 2015 "y.tab.c"
+#line 2025 "y.tab.c"
     break;
 
   case 56: /* optargs: args  */
-#line 331 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 341 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = (ExprSpecvsp[0].n);}
-#line 2021 "y.tab.c"
+#line 2031 "y.tab.c"
     break;
 
   case 57: /* args: arg  */
-#line 336 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 346 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
         {
        // ignore first argument unless it is a string (because we parse strings in weird ways)
        ExprSpecListNode* list=new ExprSpecListNode((ExprSpecloc).last_column,(ExprSpecloc).last_column);
@@ -2031,11 +2041,11 @@ ExprSpecreduce:
        remember(list);
        (ExprSpecval.n)=list;
    }
-#line 2035 "y.tab.c"
+#line 2045 "y.tab.c"
     break;
 
   case 58: /* args: args ',' arg  */
-#line 345 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 355 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                  {
 
       if((ExprSpecvsp[-2].n) && (ExprSpecvsp[0].n) && ((SPEC_IS_NUMBER((ExprSpecvsp[0].n)) || SPEC_IS_VECTOR((ExprSpecvsp[0].n)) || SPEC_IS_STR((ExprSpecvsp[0].n))))){
@@ -2045,17 +2055,17 @@ ExprSpecreduce:
           (ExprSpecval.n)=0;
       }
     }
-#line 2049 "y.tab.c"
+#line 2059 "y.tab.c"
     break;
 
   case 59: /* arg: e  */
-#line 357 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 367 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
                                 { (ExprSpecval.n) = (ExprSpecvsp[0].n);}
-#line 2055 "y.tab.c"
+#line 2065 "y.tab.c"
     break;
 
 
-#line 2059 "y.tab.c"
+#line 2069 "y.tab.c"
 
       default: break;
     }
@@ -2254,7 +2264,7 @@ ExprSpecreturn:
   return ExprSpecresult;
 }
 
-#line 360 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 370 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
 
 
 /* ExprSpecerror - Report an error.  This is called by the parser.
diff --git a/generated/KSeExprUI/ExprSpecParser.tab.h b/generated/KSeExprUI/ExprSpecParser.tab.h
index 69215d8..f6b43ef 100644
--- a/generated/KSeExprUI/ExprSpecParser.tab.h
+++ b/generated/KSeExprUI/ExprSpecParser.tab.h
@@ -82,7 +82,7 @@ extern int ExprSpecdebug;
 #if ! defined ExprSpecYYSTYPE && ! defined ExprSpecYYSTYPE_IS_DECLARED
 union ExprSpecYYSTYPE
 {
-#line 171 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
+#line 181 "@@PATH@@/src/KSeExprUI/ExprSpecParser.y"
 
     ExprSpecNode* n;
     double d;      // return value for number tokens
diff --git a/generated/KSeExprUI/ExprSpecParserLex.cpp b/generated/KSeExprUI/ExprSpecParserLex.cpp
index 4a60352..a1bbb5a 100644
--- a/generated/KSeExprUI/ExprSpecParserLex.cpp
+++ b/generated/KSeExprUI/ExprSpecParserLex.cpp
@@ -538,7 +538,7 @@ char *ExprSpectext;
 /**
  * SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
  * SPDX-License-Identifier: LicenseRef-Apache-2.0
- * SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
+ * SPDX-FileCopyrightText: 2020-2021 L. E. Segovia <amy@amyspark.me>
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
 /* Don't generate ExprSpecwrap since everything is in one string */
diff --git a/src/KSeExpr/ExprBuiltins.cpp b/src/KSeExpr/ExprBuiltins.cpp
index a198196..5b5f71e 100644
--- a/src/KSeExpr/ExprBuiltins.cpp
+++ b/src/KSeExpr/ExprBuiltins.cpp
@@ -1540,10 +1540,21 @@ public:
 
         bool valid = true;
         valid &= node->checkArg(0, ExprType().FP(1).Varying(), envBuilder);
-        for (int i = 1; i < nargs; i += 3) {
+        for (int i = 1; i < nargs && valid; i += 3) {
             valid &= node->checkArg(i, ExprType().FP(1).Constant(), envBuilder);
             valid &= node->checkArg(i + 1, ExprType().FP(1).Constant(), envBuilder);
             valid &= node->checkArg(i + 2, ExprType().FP(1).Constant(), envBuilder);
+            if (valid) {
+                const auto *value = dynamic_cast<ExprNumNode *>(node->child(i + 2));
+                if (!value) {
+                    node->addError(ErrorCode::Unknown, {QT_TRANSLATE_NOOP_UTF8("builtin", "Unable to validate the interpolant type")});
+                    return ExprType().Error().Varying();
+                }
+                else if (!Curve<Vec3d>::interpTypeValid(static_cast<Curve<Vec3d>::InterpType>((int)value->value()))){
+                    node->addError(ErrorCode::Unknown, {QT_TRANSLATE_NOOP_UTF8("builtin", "Invalid interpolant type")});
+                    return ExprType().Error().Varying();
+                }
+            }
         }
         return valid ? ExprType().FP(1).Varying() : ExprType().Error();
     }
@@ -1594,10 +1605,20 @@ class CCurveFuncX : public ExprFuncSimple
 
         bool valid = true;
         valid &= node->checkArg(0, ExprType().FP(1).Varying(), envBuilder);
-        for (int i = 1; i < nargs; i += 3) {
+        for (int i = 1; i < nargs && valid; i += 3) {
             valid &= node->checkArg(i, ExprType().FP(1).Constant(), envBuilder);
             valid &= node->checkArg(i + 1, ExprType().FP(3).Constant(), envBuilder);
             valid &= node->checkArg(i + 2, ExprType().FP(1).Constant(), envBuilder);
+            if (valid) {
+                const auto *value = dynamic_cast<ExprNumNode *>(node->child(i + 2));
+                if (!value) {
+                    node->addError(ErrorCode::Unknown, {QT_TRANSLATE_NOOP_UTF8("builtin", "Unable to validate the interpolant type")});
+                    return ExprType().Error().Varying();
+                } else if (!Curve<Vec3d>::interpTypeValid(static_cast<Curve<Vec3d>::InterpType>((int)value->value()))) {
+                    node->addError(ErrorCode::Unknown, {QT_TRANSLATE_NOOP_UTF8("builtin", "Invalid interpolant type")});
+                    return ExprType().Error().Varying();
+                }
+            }
         }
         return valid ? ExprType().FP(3).Varying() : ExprType().Error();
     }
diff --git a/src/KSeExpr/ExprParserLex.l b/src/KSeExpr/ExprParserLex.l
index 9855cbd..b9a904f 100644
--- a/src/KSeExpr/ExprParserLex.l
+++ b/src/KSeExpr/ExprParserLex.l
@@ -1,7 +1,7 @@
 /**
  * SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
  * SPDX-License-Identifier: LicenseRef-Apache-2.0
- * SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
+ * SPDX-FileCopyrightText: 2020-2021 L. E. Segovia <amy@amyspark.me>
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
 
diff --git a/src/KSeExprUI/ExprSpecParser.y b/src/KSeExprUI/ExprSpecParser.y
index 2a09c95..0fe1399 100644
--- a/src/KSeExprUI/ExprSpecParser.y
+++ b/src/KSeExprUI/ExprSpecParser.y
@@ -103,10 +103,15 @@ static void specRegisterEditable(const char* var,ExprSpecNode* node)
                     ExprSpecScalarNode* xnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i]);
                     ExprSpecVectorNode* ynode=dynamic_cast<ExprSpecVectorNode*>(args->nodes[i+1]);
                     ExprSpecScalarNode* interpnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+2]);
-                    if(xnode && ynode && interpnode){
-                        ccurve->add(xnode->v,ynode->v,interpnode->v);
-                    }else{
-                        valid=false;
+                    if (xnode && ynode && interpnode) {
+                        if (interpnode->v >= 0 && interpnode->v <= 4) {
+                            ccurve->add(xnode->v, ynode->v, interpnode->v);
+                        } else {
+                            // invalid interpolant type -- Amyspark
+                            valid = false;
+                        }
+                    } else {
+                        valid = false;
                     }
                 }
                 if(valid) editables->push_back(ccurve);
@@ -123,11 +128,16 @@ static void specRegisterEditable(const char* var,ExprSpecNode* node)
                 for(size_t i=0;i<args->nodes.size();i+=3){
                     ExprSpecScalarNode* xnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i]);
                     ExprSpecScalarNode* ynode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+1]);
-                    ExprSpecScalarNode* interpnode=dynamic_cast<ExprSpecScalarNode*>(args->nodes[i+2]);
-                    if(xnode && ynode && interpnode){
-                        ccurve->add(xnode->v,ynode->v,interpnode->v);
-                    }else{
-                        valid=false;
+                    ExprSpecScalarNode *interpnode = dynamic_cast<ExprSpecScalarNode *>(args->nodes[i + 2]);
+                    if (xnode && ynode && interpnode) {
+                        if (interpnode->v >= 0 && interpnode->v <= 4) {
+                            ccurve->add(xnode->v, ynode->v, interpnode->v);
+                        } else {
+                            // invalid interpolant type -- Amyspark
+                            valid = false;
+                        }
+                    } else {
+                        valid = false;
                     }
                 }
                 if(valid) editables->push_back(ccurve);
diff --git a/src/KSeExprUI/ExprSpecParserLex.l b/src/KSeExprUI/ExprSpecParserLex.l
index f5fcd29..1898b5a 100644
--- a/src/KSeExprUI/ExprSpecParserLex.l
+++ b/src/KSeExprUI/ExprSpecParserLex.l
@@ -1,7 +1,7 @@
 /**
  * SPDX-FileCopyrightText: 2011-2019 Disney Enterprises, Inc.
  * SPDX-License-Identifier: LicenseRef-Apache-2.0
- * SPDX-FileCopyrightText: 2020 L. E. Segovia <amy@amyspark.me>
+ * SPDX-FileCopyrightText: 2020-2021 L. E. Segovia <amy@amyspark.me>
  * SPDX-License-Identifier: GPL-3.0-or-later
  */
 
-- 
2.33.0

