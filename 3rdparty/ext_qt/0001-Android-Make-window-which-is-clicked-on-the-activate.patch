From 25a1730a4e9d1a2660a499906ac8433b307d00fd Mon Sep 17 00:00:00 2001
From: Sharaf Zaman <shzam@sdf.org>
Date: Thu, 27 Jan 2022 11:46:29 +0000
Subject: [PATCH] Android: Make window which is clicked on the activated window

Typically this functioning is managed by a proper window manager. Before
this whichever window was added the last was made the active window.
This raised a problem where if we have two popup windows (A & B), and B
came later. If we tried selecting text widget in A (even though
QAndroidPlatformScreen::topLevelAt would return the correct text
widget). The text handles wouldn't be placed properly or not invoked
because the Active window would still be B.

With this patch, we correctly move the focus to the window if it isn't
blocked by a modal window and also raise the window - so, a window's
z-order can changed.
---
 .../platforms/android/androidjniinput.cpp     | 27 ++++++++++++++++++-
 .../android/qandroidplatformscreen.cpp        | 19 ++++++++++++-
 .../android/qandroidplatformwindowmanager.cpp | 10 +++++++
 .../android/qandroidplatformwindowmanager.h   |  3 +++
 4 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/src/plugins/platforms/android/androidjniinput.cpp b/src/plugins/platforms/android/androidjniinput.cpp
index 257d013fa8..692b18df92 100644
--- a/src/plugins/platforms/android/androidjniinput.cpp
+++ b/src/plugins/platforms/android/androidjniinput.cpp
@@ -46,11 +46,13 @@
 #include "androidjnimain.h"
 #include "qandroidplatformintegration.h"
 #include "qandroidplatformwindow.h"
+#include "qandroidplatformwindowmanager.h"
 
 #include <qpa/qwindowsysteminterface.h>
 #include <QTouchEvent>
 #include <QPointer>
 
+#include <private/qguiapplication_p.h>
 #include <QGuiApplication>
 #include <QDebug>
 #include <QtMath>
@@ -136,6 +138,20 @@ namespace QtAndroidInput
                                                   anchor.x(), anchor.y(), rtl);
     }
 
+    static void checkAndSetTopLevelWindow(QWindow *window)
+    {
+        QAndroidPlatformWindowManager *wm = dynamic_cast<QAndroidPlatformWindowManager *>(window);
+        if (wm) {
+            // check if the window managed by this manager is blocked by a modal
+            // dialog (because a window manager won't be blocked)
+            window = wm->realWindow()->window();
+        }
+        if (window && !QGuiApplicationPrivate::instance()->isWindowBlocked(window)) {
+            window->raise();
+            QWindowSystemInterface::handleWindowActivated(window);
+        }
+    }
+
     static void mouseDown(JNIEnv */*env*/, jobject /*thiz*/, jint /*winId*/,
                           jint x, jint y, jint modifier, jint actionButton)
     {
@@ -150,6 +166,7 @@ namespace QtAndroidInput
             localPos = platformWindow ? platformWindow->mapFromGlobal(globalPos) : globalPos;
         }
         m_mouseGrabber = tlw;
+        checkAndSetTopLevelWindow(m_mouseGrabber);
         // NOTE: mapping between MotionEvent's BUTTON states and Qt seem consistent
         m_mouseActionButton = actionButton;
         QWindowSystemInterface::handleMouseEvent(tlw,
@@ -265,7 +282,7 @@ namespace QtAndroidInput
         m_touchPoints.clear();
     }
 
-    static void touchAdd(JNIEnv */*env*/, jobject /*thiz*/, jint /*winId*/, jint id, jint action, jboolean /*primary*/, jint x, jint y,
+    static void touchAdd(JNIEnv */*env*/, jobject /*thiz*/, jint /*winId*/, jint id, jint action, jboolean primary, jint x, jint y,
         jfloat major, jfloat minor, jfloat rotation, jfloat pressure)
     {
         Qt::TouchPointState state = Qt::TouchPointStationary;
@@ -302,6 +319,13 @@ namespace QtAndroidInput
             QAndroidInputContext *inputContext = QAndroidInputContext::androidInputContext();
             if (inputContext && qGuiApp)
                 QMetaObject::invokeMethod(inputContext, "touchDown", Q_ARG(int, x), Q_ARG(int, y));
+
+            // if the touchpoint is the first one, the window which received it should be the top
+            // level
+            if (primary) {
+                checkAndSetTopLevelWindow(
+                    QtAndroid::topLevelWindowAt(touchPoint.area.center().toPoint()));
+            }
         }
     }
 
@@ -389,6 +413,7 @@ namespace QtAndroidInput
             break;
         case AMOTION_EVENT_ACTION_DOWN:
             m_mouseGrabber = tlw;
+            checkAndSetTopLevelWindow(m_mouseGrabber);
             // fall through
         case AMOTION_EVENT_ACTION_MOVE:
             if (!buttonState)
diff --git a/src/plugins/platforms/android/qandroidplatformscreen.cpp b/src/plugins/platforms/android/qandroidplatformscreen.cpp
index da6de1806f..f1f936850a 100644
--- a/src/plugins/platforms/android/qandroidplatformscreen.cpp
+++ b/src/plugins/platforms/android/qandroidplatformscreen.cpp
@@ -218,6 +218,15 @@ void QAndroidPlatformScreen::raise(QAndroidPlatformWindow *window)
     if (window->parent() && window->isRaster())
         return;
 
+    // if the window being raised is the window manager, we just prompt the real window to be
+    // raised, and then this gets handled automatically
+    QAndroidPlatformWindowManager *wm =
+        dynamic_cast<QAndroidPlatformWindowManager *>(window->window());
+    if (wm) {
+        wm->raiseRealWindow();
+        return;
+    }
+
     int index = m_windowStack.indexOf(window);
     if (index <= 0)
         return;
@@ -238,6 +247,15 @@ void QAndroidPlatformScreen::lower(QAndroidPlatformWindow *window)
     if (window->parent() && window->isRaster())
         return;
 
+    // if the window being lowered is the window manager, we just prompt the real window to be
+    // lowered, and then this gets handled automatically
+    QAndroidPlatformWindowManager *wm =
+        dynamic_cast<QAndroidPlatformWindowManager *>(window->window());
+    if (wm) {
+        wm->lowerRealWindow();
+        return;
+    }
+
     int index = m_windowStack.indexOf(window);
     if (index == -1)
         return;
@@ -266,7 +284,6 @@ void QAndroidPlatformScreen::lower(QAndroidPlatformWindow *window)
     topWindowChanged(w);
 }
 
-
 void QAndroidPlatformScreen::setWindowGeometry(QAndroidPlatformWindow *window, const QRect &rect)
 {
     if (m_windowManagers.contains(window->winId())) {
diff --git a/src/plugins/platforms/android/qandroidplatformwindowmanager.cpp b/src/plugins/platforms/android/qandroidplatformwindowmanager.cpp
index 15bdae76a5..a352017731 100644
--- a/src/plugins/platforms/android/qandroidplatformwindowmanager.cpp
+++ b/src/plugins/platforms/android/qandroidplatformwindowmanager.cpp
@@ -43,6 +43,16 @@ void QAndroidPlatformWindowManager::updateGeometry(const QRect &rect)
     resize(QHighDpi::toNativePixels(geometry().size(), this));
 }
 
+void QAndroidPlatformWindowManager::raiseRealWindow()
+{
+    m_realWindow->raise();
+}
+
+void QAndroidPlatformWindowManager::lowerRealWindow()
+{
+    m_realWindow->lower();
+}
+
 void QAndroidPlatformWindowManager::mousePressEvent(QMouseEvent *event)
 {
     m_startingPoint = event->globalPos();
diff --git a/src/plugins/platforms/android/qandroidplatformwindowmanager.h b/src/plugins/platforms/android/qandroidplatformwindowmanager.h
index 0688a75794..f78cdc0725 100644
--- a/src/plugins/platforms/android/qandroidplatformwindowmanager.h
+++ b/src/plugins/platforms/android/qandroidplatformwindowmanager.h
@@ -26,6 +26,9 @@ public:
      * @param geometry of window to be managed, rect should be in native pixels
      */
     void updateGeometry(const QRect &rect);
+    void raiseRealWindow();
+    void lowerRealWindow();
+    QAndroidPlatformWindow *realWindow() { return m_realWindow; }
 
 protected:
     void resizeEvent(QResizeEvent *event) override;
-- 
2.34.1

